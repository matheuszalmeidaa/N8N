{
  "nodes": [
    {
      "parameters": {
        "tableId": "estoque",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "ID",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "Nome Produto",
              "fieldValue": "={{ $json.nomeProduto }}"
            },
            {
              "fieldId": "Tamanho",
              "fieldValue": "={{ $json.tamanhos }}"
            },
            {
              "fieldId": "Preço R$",
              "fieldValue": "={{ $json.amount }}"
            },
            {
              "fieldId": "Total Unit.",
              "fieldValue": "={{ $json.quantity }}"
            },
            {
              "fieldId": "26",
              "fieldValue": "={{ $json.estoque['26'] }}"
            },
            {
              "fieldId": "27",
              "fieldValue": "={{ $json.estoque['27'] }}"
            },
            {
              "fieldId": "28",
              "fieldValue": "={{ $json.estoque['28'] }}"
            },
            {
              "fieldId": "29",
              "fieldValue": "={{ $json.estoque['29'] }}"
            },
            {
              "fieldId": "30",
              "fieldValue": "={{ $json.estoque['30'] }}"
            },
            {
              "fieldId": "31",
              "fieldValue": "={{ $json.estoque['31'] }}"
            },
            {
              "fieldId": "32",
              "fieldValue": "={{ $json.estoque['32'] }}"
            },
            {
              "fieldId": "33",
              "fieldValue": "={{ $json.estoque['33'] }}"
            },
            {
              "fieldId": "34",
              "fieldValue": "={{ $json.estoque['34'] }}"
            },
            {
              "fieldId": "35",
              "fieldValue": "={{ $json.estoque['35'] }}"
            },
            {
              "fieldId": "36",
              "fieldValue": "={{ $json.estoque['36'] }}"
            },
            {
              "fieldId": "37",
              "fieldValue": "={{ $json.estoque['37'] }}"
            },
            {
              "fieldId": "38",
              "fieldValue": "={{ $json.estoque['38'] }}"
            },
            {
              "fieldId": "39",
              "fieldValue": "={{ $json.estoque['39'] }}"
            },
            {
              "fieldId": "40",
              "fieldValue": "={{ $json.estoque['40'] }}"
            },
            {
              "fieldId": "41",
              "fieldValue": "={{ $json.estoque['41'] }}"
            },
            {
              "fieldId": "42",
              "fieldValue": "={{ $json.estoque['42'] }}"
            },
            {
              "fieldId": "43",
              "fieldValue": "={{ $json.estoque['43'] }}"
            },
            {
              "fieldId": "44",
              "fieldValue": "={{ $json.estoque['44'] }}"
            },
            {
              "fieldId": "45",
              "fieldValue": "={{ $json.estoque['45'] }}"
            },
            {
              "fieldId": "46",
              "fieldValue": "={{ $json.estoque['46'] }}"
            },
            {
              "fieldId": "47",
              "fieldValue": "={{ $json.estoque['47'] }}"
            },
            {
              "fieldId": "48",
              "fieldValue": "={{ $json.estoque['48'] }}"
            },
            {
              "fieldId": "49",
              "fieldValue": "={{ $json.estoque['49'] }}"
            },
            {
              "fieldId": "Marca",
              "fieldValue": "={{ $json.details.brand.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1488,
        -192
      ],
      "id": "4fa9eb6b-b534-4efd-a725-329f6c188c79",
      "name": "Inserir Dados Supabase",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "ry8T0kPhnKQgNHIz",
          "name": "Almeida Street"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.API }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        -192
      ],
      "id": "7990daab-33a1-4cbc-b34c-b41b81257063",
      "name": "Buscar Produtos da Categoria (API)",
      "notesInFlow": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "B64GrZo2Ulknlnz6",
          "name": "Credencial Site NT"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "96b16f96-41c4-48c9-b4dd-5bd24b19ed46",
              "name": "ID",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "b7ea21b1-a8a5-40c5-908f-d507666ac8fc",
              "name": "name",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "b03634d2-55b7-4a6a-a811-aa0d12cc096d",
              "name": "amount",
              "value": "={{ $json.amount }}",
              "type": "number"
            },
            {
              "id": "43381170-c50a-4dba-b0a4-78d7d64f8e92",
              "name": "sizes",
              "value": "={{ $json.sizes[0].name }}, {{ $json.sizes[1].name }}, {{ $json.sizes[2].name }}, {{ $json.sizes[3].name }}, {{ $json.sizes[4].name }}, {{ $json.sizes[5].name }}, {{ $json.sizes[6].name }}, {{ $json.sizes[7].name }}, {{ $json.sizes[8].name }}, {{ $json.sizes[9].name }}",
              "type": "string"
            },
            {
              "id": "be29ee5e-1b18-4dad-b1af-53e4080e754a",
              "name": "Foto",
              "value": "={{ $json.image[0] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        384,
        -192
      ],
      "id": "9f929b93-c485-410a-8ee8-4785068dcb44",
      "name": "Pré-processar Dados Brutos API",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  // Limpa e padroniza o nome\n  let name = item.json.name?.trim() || '';\n  name = name.replace(/\\s+/g, ' ');\n\n  const amount = Number(item.json.amount).toFixed(2);\n  const foto = item.json.Foto?.trim();\n\n  const regexNumero = /^\\d+$/;\n  const sizesArray = item.json.sizes\n    ?.split(',')\n    .map(s => s.trim())\n    .filter(size =>\n      regexNumero.test(size) &&\n      size !== '0' && size !== '00'\n    );\n\n  const tamanhosFormatados = sizesArray.length > 0 ? sizesArray.join(', ') : '';\n\n  const id = item.json.ID?.trim() || crypto.randomUUID();\n\n  item.json = {\n    id,\n    nome_produto: name,\n    preço: amount,\n    tamanhos_disponiveis: tamanhosFormatados,\n    imagem: foto,\n  };\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -192
      ],
      "id": "78292017-fa43-46b3-a424-ff6450223be4",
      "name": "Limpar e Padronizar Dados do Produto"
    },
    {
      "parameters": {
        "url": "=https://api.calcadosnt.com.br/products/details/by-id/{{ $json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        -192
      ],
      "id": "b4a010d1-d96d-4623-b861-4bd7f3562785",
      "name": "Buscar Detalhes Completos (API)",
      "retryOnFail": true,
      "notesInFlow": false,
      "alwaysOutputData": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "B64GrZo2Ulknlnz6",
          "name": "Credencial Site NT"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sizesRange = [\"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\",\"34\",\"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"];\nconst result = [];\n\nfor (const item of $input.all()) {\n  const produto = item.json;\n  const nomeProdutoBase = (produto.name ?? \"\").trim();\n  const mapaEstoque = {};\n\n  for (const tipo of (produto.productTypes ?? [])) {\n    const tamanhoBruto = tipo.size?.name ?? \"\";\n    const tamanho = tamanhoBruto.trim();\n\n    // FILTRO: Ignora se o tamanho for \"SORTIDOS\" (com ou sem acento, espaços, etc.)\n    const tamanhoNormalizado = tamanho\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, '') // remove acentos\n      .toUpperCase();\n\n    if (tamanhoNormalizado === \"SORTIDOS\") continue;\n\n    for (const corItem of (tipo.colors ?? [])) {\n      const cor = (corItem.color?.name ?? \"\").trim();\n      const corId = corItem.color?.id ?? null;\n\n      const imageUrl =\n        corItem.color?.images?.[0]?.url ??\n        produto.thumbs?.[0]?.url ??\n        null;\n\n      const nomeProduto = `${nomeProdutoBase} - ${cor}`.replace(/\\s{2,}/g, ' ').trim();\n      const qtde = corItem.quantity ?? 0;\n\n      if (!mapaEstoque[nomeProduto]) {\n        mapaEstoque[nomeProduto] = {\n          id: corId,\n          url: imageUrl,\n          nomeProduto: nomeProduto,\n          quantity: 0,\n          available: produto.available ?? true,\n          amount: produto.amount ?? 0,\n          details: {\n            id: produto.details?.id,\n            brand: {\n              id: produto.details?.brand?.id,\n              name: produto.details?.brand?.name,\n              enable: produto.details?.brand?.enable\n            }\n          },\n          estoque: {},\n          tamanhosSet: new Set()\n        };\n      }\n\n      if (tamanho) {\n        mapaEstoque[nomeProduto].estoque[tamanho] =\n          (mapaEstoque[nomeProduto].estoque[tamanho] ?? 0) + qtde;\n        mapaEstoque[nomeProduto].quantity += qtde;\n\n        if (qtde > 0) {\n          mapaEstoque[nomeProduto].tamanhosSet.add(tamanho);\n        }\n      }\n    }\n  }\n\n  for (const itemFinal of Object.values(mapaEstoque)) {\n    for (const size of sizesRange) {\n      if (itemFinal.estoque[size] === undefined) {\n        itemFinal.estoque[size] = 0;\n      }\n    }\n\n    itemFinal.tamanhos = Array.from(itemFinal.tamanhosSet)\n      .sort((a, b) => parseInt(a) - parseInt(b))\n      .join(', ');\n\n    delete itemFinal.tamanhosSet;\n\n    result.push({ json: itemFinal });\n  }\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -192
      ],
      "id": "b76e987f-82a5-423b-ae60-d38dcc1ef2ad",
      "name": "Consolidar Dados"
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "nomeProduto",
        "options": {
          "removeOtherFields": false
        }
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1264,
        -192
      ],
      "id": "d451637e-1d2d-42d7-8fd4-7ebeacb28b24",
      "name": "Remover Duplicatas por Nome",
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "estoque",
        "filters": {
          "conditions": [
            {
              "keyName": "ID",
              "condition": "neq"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1168,
        -16
      ],
      "id": "2d92f694-3171-4b42-885d-ec0f413dd8df",
      "name": "Zerar Estoque Anterior",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "ry8T0kPhnKQgNHIz",
          "name": "Almeida Street"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 2
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1392,
        -16
      ],
      "id": "083cbeed-e58e-4870-89f1-b266edb991dc",
      "name": "Agendamento - Limpeza de Estoque (03h)",
      "notesInFlow": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1id6zmVnEbS5Ao_AfauMk_k-qeaWZaiEjNQbtzpN8Vqg",
          "mode": "list",
          "cachedResultName": "API Almeida",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1id6zmVnEbS5Ao_AfauMk_k-qeaWZaiEjNQbtzpN8Vqg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1id6zmVnEbS5Ao_AfauMk_k-qeaWZaiEjNQbtzpN8Vqg/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -720,
        -16
      ],
      "id": "31a2ff53-18b9-48fe-a385-c13bc5d61e91",
      "name": "Google Sheets",
      "retryOnFail": false,
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TNo6dIWjylUsI9sB",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -64,
        -192
      ],
      "id": "2f6bf7d4-edcf-4caa-aa75-7c6dbd723ba4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b016b620-7422-46a7-a068-f316a2e5b4c6",
              "leftValue": "={{ $json.API }}",
              "rightValue": "=https://api.calcadosnt.com.br/",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -288,
        -16
      ],
      "id": "74a510b1-2258-45e4-bea6-b7333f7257a4",
      "name": "If",
      "executeOnce": false,
      "retryOnFail": true,
      "alwaysOutputData": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "errorMessage": "=❌ Erro na linha {{ $json.row_number }} da planilha [API ALMEIDA]: Verifique os dados informados. Campo obrigatório ausente, inválido ou estrutura incorreta.\n"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        384,
        144
      ],
      "id": "06203bc2-e917-4303-8f99-90dee39275aa",
      "name": "Stop and Error",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -512,
        -16
      ],
      "id": "378094e0-f80c-4968-a668-d4b39a09c29c",
      "name": "Remove Duplicates1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -944,
        -16
      ],
      "id": "90243797-6dd3-4a5a-ae9f-1792f585ff31",
      "name": "Limit"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c38ff7bc-73a5-4b1c-9a42-a8c6eefbd585",
              "name": "=Etapa",
              "value": "={{ $json.Classe }}",
              "type": "string"
            },
            {
              "id": "6f2e321d-faad-41aa-8a81-816ac81331d2",
              "name": "numero_da_linha",
              "value": "={{ $json.row_number }}",
              "type": "string"
            },
            {
              "id": "6f2a7e0a-4720-451b-a6ab-0e4170b0cc50",
              "name": "=API INPUT",
              "value": "={{ $json.API }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -64,
        144
      ],
      "id": "823ec7b6-de0c-402d-9c72-dd258b9ca897",
      "name": "Edit Fields",
      "executeOnce": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "tableId": "logserrosautomacoes",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "etapa",
              "fieldValue": "={{ $json.Etapa }}"
            },
            {
              "fieldId": "origem",
              "fieldValue": "=Estoque"
            },
            {
              "fieldId": "fluxo de trabalho",
              "fieldValue": "=Busca da API a relação de estoque "
            },
            {
              "fieldId": "mensagemErro",
              "fieldValue": "=Falha na comunicação com a API externa. A solicitação não pôde ser concluída com sucesso."
            },
            {
              "fieldId": "numeroLinha",
              "fieldValue": "={{ $json.numero_da_linha }}"
            },
            {
              "fieldId": "entradaAPI",
              "fieldValue": "={{ $json['API INPUT'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        160,
        144
      ],
      "id": "21288c6d-8688-4933-bcd5-a1a890c228c9",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "ry8T0kPhnKQgNHIz",
          "name": "Almeida Street"
        }
      }
    }
  ],
  "connections": {
    "Buscar Produtos da Categoria (API)": {
      "main": [
        [
          {
            "node": "Pré-processar Dados Brutos API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pré-processar Dados Brutos API": {
      "main": [
        [
          {
            "node": "Limpar e Padronizar Dados do Produto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limpar e Padronizar Dados do Produto": {
      "main": [
        [
          {
            "node": "Buscar Detalhes Completos (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Detalhes Completos (API)": {
      "main": [
        [
          {
            "node": "Consolidar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Dados": {
      "main": [
        [
          {
            "node": "Remover Duplicatas por Nome",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remover Duplicatas por Nome": {
      "main": [
        [
          {
            "node": "Inserir Dados Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zerar Estoque Anterior": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agendamento - Limpeza de Estoque (03h)": {
      "main": [
        [
          {
            "node": "Zerar Estoque Anterior",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Buscar Produtos da Categoria (API)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b34afefeccaafbecd055274ae7e23d91e7b424c24389ef44ab4220224cc053de"
  }
}
